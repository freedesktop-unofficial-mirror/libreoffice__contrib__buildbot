#!/usr/bin/python
#
# This file is part of the LibreOffice project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
import argparse
import datetime
import json
import os.path
import sh
import sys
import tempfile
import time

sys.path.append('./dist-packages')

class ProposalSource:
    def __init__(self, repo, branch, platform, head_weight, bisect_weight):
        self.repo = repo
        self.branch = branch
        self.platform = platform
        self.head_weight = head_weight
        self.bisect_weight = bisect_weight

class LocalClient:
    def parse_source(self, source_data):
        return ProposalSource(source_data[0], source_data[1], source_data[2], float(source_data[3]), float(source_data[4]))
    def parse_sources(self, sources_data):
        return [self.parse_source(source_data) for source_data in sources_data]
    def __init__(self, args):
        self.args = args
        self.sources = self.parse_sources(self.args['proposal_source'])
        self.repos = set( (source.repo for source in self.sources) )
        self.tb3 = sh.Command.bake(
            sh.Command(self.args['tb3_master']),
            builder=self.args['builder'],
            format='json')
        self.logdir = self.args['logdir']
        self.workdir = tempfile.mkdtemp()
        self.buildtimes = {}
    def get_proposal(self, source):
        data = ''
        for line in self.tb3(repo=source.repo, branch=source.branch, platform=source.platform, show_proposals=True):
            data+=line
        proposals = json.loads(data)
        if len(proposals)>0:
            return proposals[0]
        else:
            return None
    def report_start(self, proposal):
        estimated_buildtime = float(120)
        if self.buildtimes.has_key( (proposal['repo'], proposal['branch'], proposal['platform']) ):
            scenario_buildtimes = self.buildtimes[ (proposal['repo'], proposal['branch'], proposal['platform']) ]
            estimated_buildtime = scenario_buildtimes[len(scenario_buildtimes)/2]
        self.tb3(repo=proposal['repo'], branch=proposal['branch'], platform=proposal['platform'], set_commit_running=proposal['commit'], estimated_buildtime=estimated_buildtime)
    def run_build(self, proposal):
        buildtime = int(time.time()*100)
        if self.logdir:
            outfile=os.path.join(self.logdir,'%s-%d.out' % (proposal['commit'], buildtime))
        else:
            outfile = '/dev/null'
        command = sh.Command(self.args['script'])
        starttime = datetime.datetime.now()
        rc = command(
            proposal['commit'],
            proposal['repo'],
            proposal['platform'],
            self.args['builder'],
            self.workdir,
            _err=outfile,
            _out=outfile,
            _ok_code=range(256)).exit_code
        duration_in_minutes = ((datetime.datetime.now() - starttime).total_seconds())/60
        if self.buildtimes.has_key( (proposal['repo'], proposal['branch'], proposal['platform']) ):
            scenario_buildtimes = self.buildtimes[ (proposal['repo'], proposal['branch'], proposal['platform']) ]
            scenario_buildtimes.append(duration_in_minutes)
            scenario_buildtimes = sorted(scenario_buildtimes)
            if len(scenario_buildtimes) > 100:
                scenario_buildtimes = scenario_buildtimes[1:-1]
            self.buildtimes[ (proposal['repo'], proposal['branch'], proposal['platform']) ] = scenario_buildtimes
        else:
            self.buildtimes[ (proposal['repo'], proposal['branch'], proposal['platform']) ] = [duration_in_minutes]
        if not rc:
            return ('good', os.path.basename(outfile))
        return ('bad', os.path.basename(outfile))
    def report_result(self, proposal, result):
        self.tb3(repo=proposal['repo'], branch=proposal['branch'], platform=proposal['platform'], set_commit_finished=proposal['commit'], result=result[0], result_reference=result[1])
    def __one_run(self):
        proposal = None
        while not proposal:
            for repo in self.repos:
                self.tb3(repo=repo, sync=True)
            proposals = [self.get_proposal(source) for source in self.sources]
            for p in proposals:
                if p and (not proposal or p.score > proposal.score):
                    proposal = p
            if not proposal or float(proposal['score']) < self.args['min_score']:
                time.sleep(self.args['poll_idle_time'])
        print proposal
        try:
            self.report_start(proposal)
        except Exception as e:
            print "except %s" % e
        result = self.run_build(proposal)
        self.report_result(proposal, result)
    def execute(self):
        if self.args['count']:
            for x in range(self.args['count']):
                self.__one_run()
        else:
            while True:
                self.__one_run()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='local tinderbox runner')
    parser.add_argument('--tb3-master', help='the path to the tb3 executable', required=True)
    parser.add_argument('--proposal-source', help='where to get proposals from', required=True, nargs=5, metavar=('REPO', 'BRANCH', 'PLATFORM', 'HEAD_MULTIPLIER', 'BIBISECT_MULTIPLIER'), action='append')
    parser.add_argument('--builder', help='name of the build machine interacting with the coordinator', required=True)
    parser.add_argument('--script', help='path to the build script', required=True)
    parser.add_argument('--logdir', help='path to the to store the logs', default=None)
    parser.add_argument('--count', help='the number of builds to try, 0 for unlimited builds  (default: unlimited)', type=int, default=0)
    parser.add_argument('--poll-idle-time', help='the number seconds to wait before a retry when not getting a good proposal (default: 60)', type=float, default=60.0)
    parser.add_argument('--min-score', help='the minimum score of a proposal to be tried (default: 0)', type=float, default=1.0)
    args = vars(parser.parse_args())
    LocalClient(args).execute()
    
# vim: set et sw=4 ts=4:
