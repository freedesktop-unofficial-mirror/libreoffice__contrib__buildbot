#!/usr/bin/env bash
#
#    Copyright (C) 2011 Norbert Thiebaud
#    License: GPLv3
#

BIN_DIR=$(dirname "$0")

PAUSE_SECOND=$((15*60))
PUSH_NIGHTLIES=0
STAGE_DIR="/tmp/pre-release"
SEND_MAIL="all"
LOCK=1
NICE=
PROFILE_NAME=
PRIME_BUILD=0
V=
CHECK=0
FORCE_REBUILD=0

# load the internal functions. note that
# tinderbuild_internals_<uname>.sh is sourced at the tail
# end of tinbuild_internals.sh. this allow you do do
# platform specific stuff.
# after the platform specific internal script (if present) is
# sourced, then tinbuild_phases.sh is sourced
# this is where the standard build cycle unit functions are implemented
# you can redefine these function in ~/.tinbuild/phases/<profile>.sh
# which is sourced, if it exist, at the end of tinderbuild_phases.sh
#
# The build cycle, invoked in this script with do_build, consist
# of 5 phases that are processed in this order: autogen, clean, make, test, push
# eeach phase execution try to invoke pre_<phase>, do_<phase> and post_<pahse>
# in this order, if the respective bash function are defined.
#
# In order to implement a specific step, pre_build for instance, you need
# to implement a function pre_build() in ~/.tinbuild/config/phases/<profile>.sh
# these function take no parameter at all, tough you can use any global variable
# (the one in which a name in UPPERCASE in this script. all effort will be made to
# maintain the existance of these variable
# every step should also condition the entiere execution of the step by testing that
# the variable $retval is equal to 0. if not the step must return $retval immediately
# the step can do which ever actions that are deemded necessary..
# the step must collect the relevant messages in tb_${B}_<step_name>.log
# In case of error the step must set the error condition in the following manner
#  report_log=tb_${B}_<step_name>.log
#  report_msgs="<step_name> failed - error is:"
#  retval=1
# with the convention that do_xxx steps are shortenen to just xxx in the above filenames
# and messages when substitution <step>.
#
# For example this is how do_make is implemented in tinderbuild_phases.sh
#
# do_make()
# {
#	 if [ "${retval}" = "0" ] ; then
#		 if ! $NICE ${MAKE?} >tb_${B}_build.log 2>&1 ; then
#             report_log=tb_${B}_build.log
#             report_msgs="build failed - error is:"
#			 retval=1
#		 fi
#	 fi
# }




source ${BIN_DIR?}/tinbuild_internals.sh

display_setup_instruction()
{
cat << EOF
In order to use $0 you need to:

* create a directory ~/.tinbuild/config
* create a file ~/.tinbuild/config/<profile_name>.cfg
    where <profile_name> is the argument you pased to the mandatory parameter -p
    that <profile_name> is sourced and define at least:
       SMTPHOST=<name of you smtp host to send email>
       SMTPUSER=<user name to connect to you smtp host>
       SMTPPW=<password to connect to your smtp host>
       TINDER_NAME=<name of you tinderbox>
       OWNER=<valid email address where people you spam with tinbuild error can contact you>

EOF
}

usage()
{
cat << EOF
Usage $0 [options] -p <profile_name>
Options:
   -h           print help
   -a <email>   'author'. This is for branch that are not under tb supervision. that is the email of the
                'author' of the branch. email are sent to that email address for sucess and failure
   -c           sanity check (verify that tou configuration is sane and send a test email)
   -i           run with ionice -c3, can be combined with -n
   -k           to not override autogen.lastrun if present (usefull with -z to do a quick test)
   -m [all,tb,owner,author,none]
                tb=mail progress to the tinderbox,
                all=tb + mail errors to the committer, general errors to the owner.
                owner= tb + any other mail to the owner only
                debug=any mail (progress or error) is sent to the owner
                author=send failure email to the authors + owner tb is not in the loop
                none=no mail
                If in doubt, use "all".
   -n           run with nice, can be combined with -i
   -p <profile> profile to use.
   -r <bandwidth> push the build nightly at a rate limited by <badnwidth> (in kB/s)
   -t           run the tests after a sucessfull build
   -v           verbose. print more progress messages
   -w           specify minimum wait between build attempt
   -z           bootstrap/prime the tinbuild

EOF
}

load_profile()
{
    local p=$1
    local rc=0

    if [ -z "$p" ] ; then
        echo "a profile is needed to run, see help" >&2
        exit 1
    else
        if [ ! -f $HOME/.tinbuild/config/${p}.cfg ] ; then
            echo "$HOME/.tinbuild/config/${p}.cfg can't be accessed" >&2
            exit 1
        else
            source "$HOME/.tinbuild/config/${p}.cfg"
            # add check to make sure that thing are setup correctly
            if [ -f "$HOME/.tinbuild/phases/${p}.sh" ] ; then
                source "$HOME/.tinbuild/phases/${p}.sh"
            fi
        fi
    fi
}

sanity_check()
{
    g=$(git rev-parse --git-dir 2> /dev/null)
    if [ "$g" != ".git" ] ; then
        echo "Error: The current working directory must be the root git repo"
        exit 1
    fi

    if [ ! -f configure.in ] ; then
        echo "Error: The current working directory must be the root git repo"
        exit 1
    fi

    if [ ! -d $HOME/.tinbuild ] ; then
        echo "Error: the directory $HOME/.tinbuild does not exist" >&2
        display_setup_instruction
        exit 1
    fi
    if [ ! -d $HOME/.tinbuild/config ] ; then
        echo "Error: the directory $HOME/.tinbuild/config does not exist" >&2
        display_setup_instruction
        exit 1
    fi
    if [ ! -f $HOME/.tinbuild/config/${PROFILE_NAME?}.cfg ] ; then
        echo "Error: the file $HOME/.tinbuild/config/${PROFILE_NAME?}.cfg does not exist" >&2
        display_setup_instruction
        exit 1
    fi
    if [ ! -f $HOME/.tinbuild/autogen/${PROFILE_NAME?}.autogen ] ; then
        if [ ! -f autogen.lastrun ] ; then
            echo "Error: Neither $HOME/.tinbuild/autogen/${PROFILE_NAME?}.autogen or autogen.lastrun exist" >&2
            exit 1
        else
            echo "Warning: the file $HOME/.tinbuild/autogen/${PROFILE_NAME?}.autogen does not exist. Will use autogen.lastrun :" >&2
            cat autogen.lastrun
        fi
    fi

    source $HOME/.tinbuild/config/${PROFILE_NAME?}.cfg || (echo "Error sourcing $HOME/.tinbuild/config/${PROFILE_NAME?}.cfg" ; exit 1)
    rc=0

    if [ -z "${SMTPHOST}" ] ; then
        echo "Error: missing SMTPHOST in config file" 1>&2
        rc=1
    fi
    if [ -z "${SMTPUSER}" ] ; then
        echo "Warning: missing SMTPUSER in config file (can work, depends on your smtp server)" 1>&2
    fi
    if [ -n "${SMTPUSER}" -a -z "${SMTPPW}" ] ; then
        echo "Error: SMTPPW empty, but SMTPUSER set in config file" 1>&2
        rc=1
    fi
    if [ -z "${TINDER_NAME}" ] ; then
        echo "Error: missing TINDER_NAME in config file" 1>&2
        rc=1
    fi
    if [ -z "${OWNER}" ] ; then
        echo "Error: missing OWNER in config file" 1>&2
        rc=1
    fi
    if [ "$rc" != "0" ] ; then
        exit 1
    fi

    local smtp_auth=""
    if [ -n "${SMTPUSER}" ] ; then
        smtp_auth="-xu ${SMTPUSER?} -xp ${SMTPPW?}"
    fi
    echo "test email from tinbuild" | ${BIN_DIR?}/sendEmail -f "$OWNER" -s "${SMTPHOST?}" $smtp_auth -t "$OWNER"  -u "tinderbuild test" || (echo "Errot sending test email" 1>&2 ; exit 1)

    echo "Checking flock"
    (
        do_flock -x 200
    ) 200>${lock_file?}

    echo "Sanity checks OK."
    exit 0
}



#
# Main
#

while getopts a:cefhiknm:p:r:tvw:z opt ; do
    case "$opt" in
        a) BRANCH_AUTHOR="$OPTARG" ;; # email to the branch's author for out-of-tinderbox branch buildbot
        e) LOCK=0 ;;      # whether to use flock to protect the build-cycle
        c) CHECK=1 ;;     # whether to invoke the sanity-check function
        f) FORCE_REBUILD=1;; # whether to force an initial rebuild on restart, even if the pull-info are unchanged
        h) usage; exit ;; # display help
        i) NICE="$NICE ionice -c3" ;; # be gentle on i/o
        k) KEEP_AUTOGEN="YES" ;; # do not override the local autogen.lastrun if present
        m) SEND_MAIL="$OPTARG" ;; # which email to wend and to whom
        n) NICE="$NICE nice" ;;   # build 'nicely' :-)
        p) PROFILE_NAME="$OPTARG" ;; # profile to use to deterine extra parameter (email mostly) and autogen arguments
        r) PUSH_NIGHTLIES=1 ; BANDWIDTH="$OPTARG" ;; # whether to upload daily build.
        s) STAGE_DIR="$OTPARG" ;; # where to stage the build in case of -z with upload
        t) DO_TESTS=1 ;; # whether to run tests after the build
        v) V=1 ;;         # print more messages
        w) PAUSE_SECONDS="$OPTARG" ;; # cool-down time after a build, in seconds
        z) PRIME_BUILD=1 ;;           # to run an initial build (without sending any email) to establish a 'baseline'
        ?) usage; exit ;;
    esac
done

if [ "$CHECK" = "1" ] ; then
    sanity_check
fi

load_profile "$PROFILE_NAME"

# if we want email to be sent, we must make sure that the required parameters are set in the profile (or in the environment)
case "$SEND_MAIL" in
    all|tb|owner|debug|author)
        if [ -n "${SEND_MAIL}" ] ; then
            rc=0
            if [ -z "${SMTPHOST}" ] ; then
                echo "Error: missing SMTPHOST" 1>&2
                rc=1
            fi
            if [ -z "${SMTPUSER}" ] ; then
                echo "Warning: missing SMTPUSER (can work, depends on your smtp server)" 1>&2
            fi
            if [ -n "${SMTPUSER}" -a -z "${SMTPPW}" ] ; then
                echo "Error: missing SMTPPW" 1>&2
                rc=1
            fi
            if [ -z "${TINDER_NAME}" ] ; then
                echo "Error: missing TINDER_NAME" 1>&2
                rc=1
            fi
            if [ -z "${OWNER}" ] ; then
                echo "Error: missing OWNER" 1>&2
                rc=1
            fi
            if [ "$rc" != "0" ] ; then
                exit 1
            fi
        fi
        ;;
    none)
        SEND_MAIL=""
        ;;
    *)
        echo "Invalid -m argument:$SEND_MAIL" 1>&2
        exit 1
        ;;
esac


# where to report
# right now we are limited to local branch that match what the tinderbox server expect
#
if [ -n "$BRANCH" ] ; then
    TINDER_BRANCH="$BRANCH"
    B="$BRANCH"
else
    B=`git branch | grep '^\*' | sed 's/^..//' | sed 's/\//_/g'`
    TINDER_BRANCH=
    case "$B" in

    master) TINDER_BRANCH='MASTER' ;;
    libreoffice-3-4) TINDER_BRANCH=$B ;;
    libreoffice-3-5) TINDER_BRANCH=$B ;;
    *)
        if [ "${PRIME_BUILD}" = "1" ] ; then
            TINDER_BRANCH=$B
        else
            if [ "$SEND_MAIL" = "all" -o "$SEND_MAIL" = "" ] ; then
                echo "Unknown, non-registered branch, please update tinbuild, and tinderbox.libreoffice.org."2>&1 ; exit 1;
            else
                TINDER_BRANCH=$B
            fi
        fi
        ;;
    esac
fi

collect_current_heads

# do a build without involving the tinderbox to establish a good baseline
if [ "${PRIME_BUILD?}" = "1" ] ; then
    if [ "$SEND_MAIL" != "owner" ] ; then
        SEND_MAIL=""  # we don't want to notify the tinderbox
    fi
    # if we want to upload after a prime, we really want to upload, not just once a day
    if [ "$PUSH_NIGHTLIES" = "1" ] ; then
        rm -f "tb_${B}_last-upload-day.txt"
    fi

    log_msgs "Starting primer for branch '$TINDER_BRANCH'."
    (
        do_flock -x 200

        do_build

        rotate_logs

        if [ "$retval" = "0" ] ; then
            exit 0
        else
            exit 1
        fi
    ) 200>${lock_file?}
    retval=$?

    exit ${retval?}
else
    if [ ! -f "tb_${B}_last-success-git-heads.txt" ] ; then
        echo "You need a valid baseline. run once with -z or make sure you have a valid tb_${B}_last-success-git-heads.txt" 1>&2
        exit 1;
    else
#        rm -f tb_${B}_stop
        # reset to at the last sucessfull build
        if [ "$FORCE_REBUILD" = "1" ] ; then
            retval="false_negative" # to force a rebuild the first time around
        else
            retval=0
        fi
        cp tb_${B}_last-success-git-heads.txt tb_${B}_current-git-heads.log
        cp tb_${B}_last-success-git-timestamp.txt tb_${B}_current-git-timestamp.log
        rotate_logs
    fi
fi

# main tinderbox loop
while true; do

    if [ -f tb_${B}_stop ] ; then
        break
    fi

    if [ "$retval" != "false_negative" ] ; then
        wait_for_commits
    else
		collect_current_heads
    fi
    if [ -f tb_${B}_stop ] ; then
        break
    fi
    last_checkout_date="$(cat tb_${B}_current-git-timestamp.log)"
    (
        do_flock -x 200

        do_build

        rotate_logs
        if [ "$retval" = "0" ] ; then
            exit 0
        elif [ "$retval" = "false_negative" ] ; then
            exit 2
        else
            exit 1
        fi

    ) 200>${lock_file?}

    if [ -f tb_${B}_stop ] ; then
        break
    fi

    if [ "$?" != "2" ] ; then
        log_msgs "Waiting ${PAUSE_SECOND?} seconds."
	    sleep ${PAUSE_SECOND?}
        retval="0"
    else
        retval="false_negative"
    fi
done

if [ -f tb_${B}_stop ] ; then
    log_msgs "Stoped by request"
    rm tb_${B}_stop
fi
