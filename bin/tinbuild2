#!/usr/bin/env bash

bin_dir=$(dirname "$0")

PAUSE_SECOND=$((15*60))
PUSH_NIGHTLIES=0
SEND_MAIL="all"
LOCK=1
NICE=
PROFILE_NAME=
PRIME_BUILD=0
VERBOSE=0

source ${bin_dir?}/tinbuild_internals.sh

usage()
{
cat << EOF
Usage $0 [options] -p <profile_name>
Options:
   -h           print help
   -i           run with ionice -c3, can be combined with -n
   -m [all,tb,owner,none]
                tb=mail progress to the tinderbox,
                all=tb + mail errors to the committer, general errors to the owner.
                owner= tb + any other mail to the owner only
                debug=any mail (progress or error) is sent to the owner
                none=no mail
                Default=all"
   -n           run with nice, can be combined with -i
   -p <profile> profile to use.
   -r <bandwidth> push the build nightly at a rate limited by <badnwidth> (in kB/s)
   -v           verbose. print more progress messages
   -w           specify minimum wait between build attempt
   -z           bootstrap/prime the tinbuild

<profile> is a name used to locate configuration information
in ~/.tinbuild/config/<profile>.cfg

EOF
}

load_profile()
{
    local p=$1
    local rc=0

    if [ -z "$p" ] ; then
        echo "a profile is needed to run, see help" >&2
        exit 1
    else
        if [ ! -f $HOME/.tinbuild/config/${p}.cfg ] ; then
            echo "$HOME/.tinbuild/config/${p}.cfg can't be accessed" >&2
            exit 1
        else
            source "$HOME/.tinbuild/config/${p}.cfg"
            # add check to make sure that thing are setup correctly
            if [ -f "$HOME/.tinbuild/phases/${p}.sh" ] ; then
                source "$HOME/.tinbuild/phases/${p}.sh"
            fi
        fi
    fi
}

while getopts ehinm:p:rvw:z opt ; do
    case "$opt" in
        e) LOCK=0 ;;
        h) usage; exit ;;
        i) NICE="$NICE ionice -c3" ;;
        m) SEND_MAIL="$OPTARG" ;;
        n) NICE="$NICE nice" ;;
        p) PROFILE_NAME="$OPTARG" ;;
        r) PUSH_NIGHTLIES=1 ; BANDWIDTH="$OPTARG" ;;
        v) VERBOSE="1" ;;
        w) PAUSE_SECONDS="$OPTARG" ;;
        z) PRIME_BUILD=1 ;;
        ?) usage; exit ;;
    esac
done

load_profile "$PROFILE_NAME"

case "$SEND_MAIL" in
    all|tb|owner|debug)
        if [ -n "${SEND_MAIL}" ] ; then
            rc=0
            if [ -z "${SMTPHOST}" ] ; then
                echo "Error: missing SMTPHOST" 1>&2
                rc=1
            fi
            if [ -z "${SMTPUSER}" ] ; then
                echo "Error: missing SMTPUSER" 1>&2
                rc=1
            fi
            if [ -z "${SMTPPW}" ] ; then
                echo "Error: missing SMTPPW" 1>&2
                rc=1
            fi
            if [ -z "${TINDER_NAME}" ] ; then
                echo "Error: missing TINDER_NAME" 1>&2
                rc=1
            fi
            if [ -z "${OWNER}" ] ; then
                echo "Error: missing OWNER" 1>&2
                rc=1
            fi
            if [ "$rc" != "0" ] ; then
                exit 1
            fi
        fi
        ;;
    none)
        SEND_MAIL=""
        ;;
    *)
        echo "Invalid -m argument:$SEND_MAIL" 1>&2
        exit 1
        ;;
esac


# where to report
current_branch=`git branch | grep '^\*' | sed 's/^..//'`
TINDER_BRANCH=
case "$current_branch" in
    master) TINDER_BRANCH='MASTER' ;;
    libreoffice-3-4) TINDER_BRANCH=$current_branch ;;
    *) echo "Unknown, non-registered branch, please update tinbuild, and tinderbox.libreoffice.org."2>&1 ; exit 1 ;;
esac

collect_current_heads

# do a build without involving the tinderbox to establish a good baseline
if [ "${PRIME_BUILD?}" = "1" ] ; then
    SEND_MAIL=""  # we don't want to notify the tinderbox
    log_msgs "Starting primer for branch '$TINDER_BRANCH'."
    (
        do_flock -x 200

        do_build

        rotate_logs

        exit ${retval?}
    ) 200>${lock_file?}
    retval=$?

    exit ${retval?}
else
    if [ ! -f "tb_last-success-git-heads.txt" ] ; then
        echo "You need a valid baseline. run once with -z or make sure you have a valid tb_last-success-git-heads.txt" 1>&2
        exit 1;
    else
        # reset to at the last sucessfull build
        retval=0
        cp tb_last-success-git-heads.txt tb_current-git-heads.log
        cp tb_last-success-git-timestamp.txt tb_current-git-timestamp.log
        rotate_logs
    fi
fi

# main tinderbox loop
while true; do

    wait_for_commits
    last_checkout_date="$(cat tb_current-git-timestamp.log)"
    (
        do_flock -x 200

        do_build

        rotate_logs

        exit ${retval?}
    ) 200>${lock_file?}



    log_msgs "Waiting ${PAUSE_SECOND?} seconds."
	sleep ${PAUSE_SECOND?}

done
